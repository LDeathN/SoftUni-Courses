# First Problem

class take_skip:
    def __init__(self, step: int, count: int):
        self.step = step
        self.count = count
        self.current = 0
        self.number = 0

    def __iter__(self):
        return self

    def __next__(self):
        while self.current != self.count:
            if self.current == 0:
                self.current += 1
                return self.number
            self.current += 1
            self.number += self.step
            return self.number
        raise StopIteration



# Second Problem

class dictionary_iter:
    def __init__(self, dictionary: dict):
        self.dictionary = dictionary
        self.dictionary_items = list(self.dictionary.items())

    def __iter__(self):
        return self

    def __next__(self):
        while self.dictionary_items:
            return self.dictionary_items.pop(0)
        raise StopIteration



# Third Problem

class countdown_iterator:
    def __init__(self, count):
        self.count = count

    def __iter__(self):
        return self

    def __next__(self):
        while self.count >= 0:
            self.count -= 1
            return self.count + 1
        raise StopIteration



# Fourth Problem

class sequence_repeat:
    def __init__(self, sequence: str, number: int):
        self.sequence = sequence
        self.number = number
        self.count = -1

    def __iter__(self):
        return self

    def __next__(self):
        while self.count != self.number - 1:
            self.count += 1
            return self.sequence[self.count % len(self.sequence)]
        raise StopIteration



# Fifth Problem

def solution():
    def integers():
        current = 1
        while True:
            yield current
            current += 1

    def halves():
        for number in integers():
            yield number / 2

    def take(n, seq):
        result = []
        for _ in range(n):
            result.append(next(seq))
        return result

    return take, halves, integers



# Sixth Problem

def fibonacci():
    num1 = 0
    num2 = 1
    yield num1
    while True:
        yield num2
        next_num = num1 + num2
        num1 = num2
        num2 = next_num



# Seventh Problem

def read_next(*args):
    for arg in args:
        for element in arg:
            yield element



# Eighth Problem

def get_primes(numbers):
    for number in numbers:
        if number > 1:
            count = 0
            for i in range(1, number + 1):
                if number % i == 0:
                    count += 1
            if count == 2:
                yield number



# Ninth Problem

from itertools import permutations


def possible_permutations(numbers):
    for perm in permutations(numbers):
        yield list(perm)
