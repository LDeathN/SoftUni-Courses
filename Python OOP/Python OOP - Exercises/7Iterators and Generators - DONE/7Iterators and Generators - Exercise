# First Problem

class take_skip:
    def __init__(self, step: int, count: int):
        self.step = step
        self.count = count
        self.current = 0
        self.number = 0

    def __iter__(self):
        return self

    def __next__(self):
        while self.current != self.count:
            if self.current == 0:
                self.current += 1
                return self.number
            self.current += 1
            self.number += self.step
            return self.number
        raise StopIteration


# Second Problem

class dictionary_iter:
    def __init__(self, dictionary: dict):
        self.dictionary = dictionary
        self.dictionary_items = list(self.dictionary.items())

    def __iter__(self):
        return self

    def __next__(self):
        while self.dictionary_items:
            return self.dictionary_items.pop(0)
        raise StopIteration


# Third Problem

class countdown_iterator:
    def __init__(self, count):
        self.count = count

    def __iter__(self):
        return self

    def __next__(self):
        while self.count >= 0:
            self.count -= 1
            return self.count + 1
        raise StopIteration
